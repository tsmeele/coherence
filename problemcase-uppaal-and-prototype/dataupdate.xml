<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.



// A is number of agents that concurrently modify a data object property
const int A = 3;
typedef int[0,A-1] id_a; // agent id's

// R is number of replicas that a data object has
const int R = 3;
typedef int[0,R] id_obj; // objects (both data object and replicas)
typedef int[1,R] id_r; // replicas only

// global state, property of the dataobject and its replicas
// agents update the data/replica object with the value representing their id
id_a objValue[id_obj];       // current peristent value held at Object (update is applied)
id_a objRead[id_obj];    // last value reaceived via Read operation by Object (update is read) 


// communication channels between agents and objects
chan upd[id_obj], ack[id_obj];
meta id_a updValue;    // the value that the object's property will be set to

// communication channels between agents and locks
const int MUTEX = 0;  // we repurpose the first object's mutex in scenarios where we use a generic mutex lock
chan lock[id_a][id_obj], unlock[id_a][id_obj];  // one mutex per object
id_a currentLock[id_obj];

</declaration>
	<template>
		<name>AgentNaive</name>
		<parameter>id_a a</parameter>
		<declaration>id_obj i;


</declaration>
		<location id="id0" x="-433" y="-42">
			<name x="-443" y="-76">updateStart</name>
		</location>
		<location id="id1" x="-25" y="-42">
			<name x="-35" y="-76">objSelected</name>
		</location>
		<location id="id2" x="-25" y="110">
			<name x="-34" y="127">objUpdated</name>
		</location>
		<location id="id3" x="-433" y="110">
			<name x="-477" y="127">updateEnd</name>
			<committed/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-306" y="-34">i := 0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-136" y="119">i &gt;= R</label>
			<label kind="synchronisation" x="-136" y="144">ack[i]?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-136" y="8">i &lt; R</label>
			<label kind="synchronisation" x="-136" y="34">ack[i]?</label>
			<label kind="assignment" x="-136" y="59">i++</label>
			<nail x="-59" y="34"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="17" y="8">upd[i]!</label>
			<label kind="assignment" x="17" y="34">updValue := a</label>
			<nail x="8" y="34"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">AgentMutex</name>
		<parameter>id_a a</parameter>
		<declaration>// Place local declarations here.
id_obj i;


</declaration>
		<location id="id4" x="-127" y="0">
			<name x="-145" y="-42">updateStart</name>
		</location>
		<location id="id5" x="365" y="0">
			<name x="357" y="-42">objSelected</name>
		</location>
		<location id="id6" x="365" y="178">
			<name x="357" y="195">objUpdated</name>
		</location>
		<location id="id7" x="153" y="178">
			<name x="119" y="195">allUpdated</name>
		</location>
		<location id="id8" x="-127" y="178">
			<name x="-178" y="195">updateEnd</name>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="34" y="8">lock[a][MUTEX]!</label>
			<label kind="assignment" x="42" y="34">i := 0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-59" y="195">unlock[a][MUTEX]!</label>
			<nail x="-102" y="178"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id4"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="246" y="187">i &gt;= R</label>
			<label kind="synchronisation" x="246" y="212">ack[i]?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="272" y="59">i &lt; R</label>
			<label kind="synchronisation" x="272" y="85">ack[i]?</label>
			<label kind="assignment" x="272" y="110">i++</label>
			<nail x="323" y="85"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="416" y="51">upd[i]!</label>
			<label kind="assignment" x="416" y="76">updValue := a</label>
			<nail x="408" y="85"/>
		</transition>
	</template>
	<template>
		<name>AgentMutexReverse</name>
		<parameter>id_a a</parameter>
		<declaration>id_obj i;

</declaration>
		<location id="id9" x="-246" y="-68">
			<name x="-256" y="-102">updateStart</name>
		</location>
		<location id="id10" x="127" y="-68">
			<name x="117" y="-102">objSelected</name>
		</location>
		<location id="id11" x="127" y="76">
			<name x="127" y="93">objUpdated</name>
		</location>
		<location id="id12" x="-68" y="76">
			<name x="-77" y="93">allUpdated</name>
		</location>
		<location id="id13" x="-246" y="76">
			<name x="-323" y="93">updateEnd</name>
			<committed/>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-102" y="-59">lock[a][MUTEX]!</label>
			<label kind="assignment" x="-93" y="-42">i := R</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id9"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-228" y="59">unlock[a][MUTEX]!</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="34" y="-17">i &gt; 0</label>
			<label kind="synchronisation" x="34" y="8">ack[i]?</label>
			<label kind="assignment" x="34" y="34">i--</label>
			<nail x="85" y="8"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="161" y="-51">upd[i]!</label>
			<label kind="assignment" x="161" y="-34">updValue := a</label>
			<nail x="170" y="8"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="34" y="85">i == 0</label>
			<label kind="synchronisation" x="34" y="110">ack[i]?</label>
		</transition>
	</template>
	<template>
		<name>AgentMilestones</name>
		<parameter>id_a a</parameter>
		<declaration>id_obj i;

</declaration>
		<location id="id14" x="34" y="0">
			<name x="24" y="-34">updateStart</name>
		</location>
		<location id="id15" x="34" y="170">
			<name x="-8" y="187">updateEnd</name>
			<committed/>
		</location>
		<location id="id16" x="323" y="0">
			<name x="296" y="-34">objSelected</name>
		</location>
		<location id="id17" x="654" y="170">
			<name x="645" y="187">objUpdated</name>
		</location>
		<location id="id18" x="484" y="0">
			<name x="474" y="-34">objLocked</name>
		</location>
		<location id="id19" x="323" y="170">
			<name x="272" y="187">PrevObjUnlocked</name>
		</location>
		<location id="id20" x="654" y="0">
			<name x="645" y="-34">objRequested</name>
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="assignment" x="153" y="8">i := 0</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id15"/>
			<label kind="guard" x="144" y="178">i &gt;= R</label>
			<label kind="synchronisation" x="144" y="204">unlock[a][i]!</label>
			<nail x="152" y="170"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="guard" x="331" y="85">i &lt; R</label>
			<label kind="assignment" x="331" y="110">i++</label>
			<nail x="323" y="85"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="guard" x="510" y="127">i == 0</label>
			<nail x="484" y="153"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="guard" x="510" y="204">i &gt; 0</label>
			<label kind="synchronisation" x="510" y="229">unlock[a][i-1]!</label>
			<nail x="484" y="195"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="535" y="8">upd[i]!</label>
			<label kind="assignment" x="535" y="34">updValue := a</label>
			<nail x="637" y="0"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="671" y="76">ack[i]?</label>
			<nail x="654" y="127"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="365" y="8">lock[a][i]!</label>
		</transition>
	</template>
	<template>
		<name>Lock</name>
		<parameter>id_obj ob</parameter>
		<location id="id21" x="-382" y="-110">
			<name x="-392" y="-144">unlocked</name>
		</location>
		<location id="id22" x="-76" y="-110">
			<name x="-86" y="-144">locked</name>
		</location>
		<init ref="id21"/>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-68" y="-68">unlock[currentLock[ob]][ob]?</label>
			<label kind="assignment" x="-68" y="-34">currentLock[ob] := 0</label>
			<nail x="-76" y="25"/>
			<nail x="-187" y="25"/>
			<nail x="-382" y="25"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="select" x="-280" y="-102">a:id_a</label>
			<label kind="synchronisation" x="-280" y="-85">lock[a][ob]?</label>
			<label kind="assignment" x="-280" y="-59">currentLock[ob] := a</label>
		</transition>
	</template>
	<template>
		<name>Object</name>
		<parameter>id_obj obj</parameter>
		<declaration>
</declaration>
		<location id="id23" x="-110" y="-25">
			<name x="-120" y="-59">idle</name>
		</location>
		<location id="id24" x="170" y="-25">
			<name x="160" y="-59">read</name>
		</location>
		<location id="id25" x="170" y="119">
			<name x="144" y="136">applied</name>
			<committed/>
		</location>
		<init ref="id23"/>
		<transition>
			<source ref="id25"/>
			<target ref="id23"/>
			<nail x="-110" y="119"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="187" y="8">ack[obj]!</label>
			<label kind="assignment" x="187" y="34">objValue[obj] := objRead[obj]</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-51" y="-17">upd[obj]?</label>
			<label kind="assignment" x="-51" y="8">objRead[obj] := updValue,
updValue := 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.


system AgentNaive, Object;
//system AgentMutex, Object, Lock;
//system AgentMutexReverse, Object, Lock;
//system AgentMilestones, Object, Lock;</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>safety:check for deadlocks
</comment>
		</query>
		<query>
			<formula>A[] (Object(1).read and objRead[1] == 1) imply (objRead[0] == 1)</formula>
			<comment>simplified check for coherence as baseline test (other results can be induced)</comment>
		</query>
		<query>
			<formula>A[] (forall (r:id_r) (Object(r).read and (objRead[r] == 1)) imply (objRead[r-1] == 1) )</formula>
			<comment>coherence defined as a safety: relation between last read operations (note that the read value may not have been applied yet as an update)</comment>
		</query>
		<query>
			<formula>A[] ( (objValue[0] == objValue[1]) or (objRead[0] == objValue[0]) or (objRead[1] == objValue[1]) )</formula>
			<comment>coherence step check: either object values same, or one object in transition while other has old value</comment>
		</query>
		<query>
			<formula>A&lt;&gt; (Object(0).read and objRead[0] == 1 and objValue[0] == 2) imply (Object(1).read and objRead[1] == 1 and objValue[1] == 2)</formula>
			<comment>coherence liveness: an update operation in object(0) will always eventually be followed by a similar operation in object(1)</comment>
		</query>
		<query>
			<formula>A&lt;&gt; (objRead[0] == objRead[1])</formula>
			<comment>coherence liveness: an update operation in object(0) will always eventually be followed by a similar operation in object(1)
</comment>
		</query>
		<query>
			<formula>A[] AgentMutex(0).updateEnd imply (forall (x:id_obj) objValue[x] == 0)
</formula>
			<comment>dit zal alleen gelden als alle replicas atomically geupdate worden met een object &amp;&amp; als na read ook update direct applied is</comment>
		</query>
	</queries>
</nta>
